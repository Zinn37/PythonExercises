#Write a function called binarySearch which accepts a sorted array and a value and returns the index at which the value exists. Otherwise, return -1.

def binarySearch(arr, val):
     min = 0
     max = len(arr) - 1
     while min <= max:
         middle = (min + max) // 2
         current_element = arr[middle]

         if arr[middle] < val:
             min = middle + 1
         elif arr[middle] > val:
             max = middle - 1
         else:
             return middle
     return -1

def binarySearch_test():
     try:
         assert binarySearch([1,2,3,4,5], 2) == 1
         assert binarySearch([1,2,3,4,5], 3) == 2
         assert binarySearch([1,2,3,4,5], 5) == 4
         assert binarySearch([1,2,3,4,5], 6) == -1
         assert binarySearch([5,6,10,13,14,18,30,34,35,37,40,44,64,79,84,86,95,96,98,99], 10) == 2
         assert binarySearch([5,6,10,13,14,18,30,34,35,37,40,44,64,79,84,86,95,96,98,99], 95) == 16
         assert binarySearch([5,6,10,13,14,18,30,34,35,37,40,44,64,79,84,86,95,96,98,99], 100) == -1
         print("All tests passed1!")

     except AssertionError:
         print("Some tests failed!")

     else:
         print("All tests passed2!")

     finally:
         print("Print this no matter what")


binarySearch_test()
